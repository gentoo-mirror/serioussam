diff -aurN a/CMakeLists.txt b/CMakeLists.txt
--- a/CMakeLists.txt	2022-08-02 15:49:15.074780451 +0300
+++ b/CMakeLists.txt	2022-08-02 16:12:07.190540893 +0300
@@ -821,6 +821,7 @@
     Engine/Base/Parser.cpp
     Engine/Base/Parser.h
     Engine/Base/IFeel.cpp
+    Engine/Base/iconvlite.cpp
     Engine/Base/Unix/UnixFileSystem.cpp
     Engine/Base/Unix/UnixDynamicLoader.cpp
     Engine/Base/SDL/SDLTimer.cpp
diff -aurN a/Engine/Base/CTString.cpp b/Engine/Base/CTString.cpp
--- a/Engine/Base/CTString.cpp	2022-08-02 15:49:15.074780451 +0300
+++ b/Engine/Base/CTString.cpp	2022-08-02 15:47:41.678061887 +0300
@@ -713,7 +713,13 @@
   strVar.SaveVar(fnmVar);
 }
 
-
+// used to convert string from ansi format into utf-8 (
+CTString strWindow1251ToUtf8(CTString from)
+{
+  static char outBuffer[10000];
+  cp2utf1(outBuffer, from.str_String, sizeof(outBuffer) - 10);
+  return (CTString) outBuffer;
+}
 
 // remove special codes from string
 CTString RemoveSpecialCodes( const CTString &str)
diff -aurN a/Engine/Base/CTString.h b/Engine/Base/CTString.h
--- a/Engine/Base/CTString.h	2022-08-02 15:49:15.074780451 +0300
+++ b/Engine/Base/CTString.h	2022-08-02 15:47:41.678061887 +0300
@@ -138,7 +138,7 @@
 ENGINE_API void SaveIntVar(    const CTFileName &fnmVar, INDEX &iVar);
 
 ENGINE_API CTString RemoveSpecialCodes( const CTString &str);
-
+ENGINE_API CTString strWindow1251ToUtf8(CTString from);
 
 #include <Engine/Base/CTString.inl>
 
diff -aurN a/Engine/Base/iconvlite.cpp b/Engine/Base/iconvlite.cpp
--- a/Engine/Base/iconvlite.cpp	1970-01-01 03:00:00.000000000 +0300
+++ b/Engine/Base/iconvlite.cpp	2022-08-02 15:47:41.681395234 +0300
@@ -0,0 +1,36 @@
+#include "iconvlite.h"
+
+void cp2utf1(char *out, const char *in, size_t out_size) {
+    static const int table[128] = {
+        0x82D0,0x83D0,0x9A80E2,0x93D1,0x9E80E2,0xA680E2,0xA080E2,0xA180E2,
+        0xAC82E2,0xB080E2,0x89D0,0xB980E2,0x8AD0,0x8CD0,0x8BD0,0x8FD0,
+        0x92D1,0x9880E2,0x9980E2,0x9C80E2,0x9D80E2,0xA280E2,0x9380E2,0x9480E2,
+        0,0xA284E2,0x99D1,0xBA80E2,0x9AD1,0x9CD1,0x9BD1,0x9FD1,
+        0xA0C2,0x8ED0,0x9ED1,0x88D0,0xA4C2,0x90D2,0xA6C2,0xA7C2,
+        0x81D0,0xA9C2,0x84D0,0xABC2,0xACC2,0xADC2,0xAEC2,0x87D0,
+        0xB0C2,0xB1C2,0x86D0,0x96D1,0x91D2,0xB5C2,0xB6C2,0xB7C2,
+        0x91D1,0x9684E2,0x94D1,0xBBC2,0x98D1,0x85D0,0x95D1,0x97D1,
+        0x90D0,0x91D0,0x92D0,0x93D0,0x94D0,0x95D0,0x96D0,0x97D0,
+        0x98D0,0x99D0,0x9AD0,0x9BD0,0x9CD0,0x9DD0,0x9ED0,0x9FD0,
+        0xA0D0,0xA1D0,0xA2D0,0xA3D0,0xA4D0,0xA5D0,0xA6D0,0xA7D0,
+        0xA8D0,0xA9D0,0xAAD0,0xABD0,0xACD0,0xADD0,0xAED0,0xAFD0,
+        0xB0D0,0xB1D0,0xB2D0,0xB3D0,0xB4D0,0xB5D0,0xB6D0,0xB7D0,
+        0xB8D0,0xB9D0,0xBAD0,0xBBD0,0xBCD0,0xBDD0,0xBED0,0xBFD0,
+        0x80D1,0x81D1,0x82D1,0x83D1,0x84D1,0x85D1,0x86D1,0x87D1,
+        0x88D1,0x89D1,0x8AD1,0x8BD1,0x8CD1,0x8DD1,0x8ED1,0x8FD1
+    };
+    char *max = out + out_size;
+    while (*in && out < max)
+        if (*in & 0x80) {
+            int v = table[(int)(0x7f & *in++)];
+            if (!v)
+                continue;
+            *out++ = (char)v;
+            *out++ = (char)(v >> 8);
+            if (v >>= 16)
+                *out++ = (char)v;
+        }
+        else
+            *out++ = *in++;
+    *out = 0;
+}
diff -aurN a/Engine/Base/iconvlite.h b/Engine/Base/iconvlite.h
--- a/Engine/Base/iconvlite.h	1970-01-01 03:00:00.000000000 +0300
+++ b/Engine/Base/iconvlite.h	2022-08-02 15:47:41.681395234 +0300
@@ -0,0 +1,15 @@
+/*
+iconvlite.h
+Iconv Lite
+Simple cpp functions to convert strings from cp1251 to utf8 and ftom utf8 to cp1251
+https://github.com/Iyamoto/iconv-lite
+*/
+
+#ifndef ICONVLITE_H
+#define ICONVLITE_H
+
+#include <cstdio>
+
+void cp2utf1(char *out, const char *in, size_t out_size);
+
+#endif
\ В конце файла нет новой строки
diff -aurN a/Engine/Base/Stream.cpp b/Engine/Base/Stream.cpp
--- a/Engine/Base/Stream.cpp	2022-08-02 15:49:15.074780451 +0300
+++ b/Engine/Base/Stream.cpp	2022-08-02 15:51:24.451380040 +0300
@@ -43,6 +43,8 @@
 #include <Engine/Templates/Stock_CTextureData.h>
 #include <Engine/Templates/Stock_CModelData.h>
 
+#include "iconvlite.h"
+
 // default size of page used for stream IO operations (4Kb)
 ULONG _ulPageSize = 0;
 // maximum length of file that can be saved (default: 128Mb)
@@ -56,7 +58,7 @@
 ULONG _ulVirtuallyAllocatedSpaceTotal = 0;
 THREADLOCAL(CListHead *, _plhOpenedStreams, NULL);
 
-// global string with application path
+// global string with application path (utf-8)
 CTFileName _fnmApplicationPath;
 // global string with filename of the started application
 CTFileName _fnmApplicationExe;
@@ -82,7 +84,12 @@
 // list of paths or patterns that are not included when making CRCs for network connection
 // this is used to enable connection between different localized versions
 CDynamicStackArray<CTFileName> _afnmNoCRC;
-
+// used to convert filenames from ansi format (written inside text files) into utf-8 (
+CTFileName convertWindow1251ToUtf8(const CTFileName &from) {
+  static char outBuffer[10000];
+  cp2utf1(outBuffer, from.str_String, sizeof(outBuffer) - 10);
+  return (CTString) outBuffer;
+}
 
 // load a filelist
 static BOOL LoadFileList(CDynamicStackArray<CTFileName> &afnm, const CTFileName &fnmList)
@@ -1446,7 +1453,7 @@
 
     // first try in the mod's dir
     if (!fil_bPreferZips) {
-      fnmExpanded = _fnmApplicationPath+_fnmMod+fnmFile;
+      fnmExpanded = _fnmApplicationPath + _fnmMod + convertWindow1251ToUtf8(fnmFile);
       if (IsFileReadable_internal(fnmExpanded)) {
         return EFP_FILE;
       }
@@ -1464,7 +1471,7 @@
 
     // try in the mod's dir after
     if (fil_bPreferZips) {
-      fnmExpanded = _fnmApplicationPath+_fnmMod+fnmFile;
+      fnmExpanded = _fnmApplicationPath + _fnmMod + convertWindow1251ToUtf8(fnmFile);
       if (IsFileReadable_internal(fnmExpanded)) {
         return EFP_FILE;
       }
@@ -1477,9 +1484,9 @@
     fnmAppPath.SetAbsolutePath();
 
     if(fnmFile.HasPrefix(fnmAppPath)) {
-      fnmExpanded = fnmFile;
+      fnmExpanded = convertWindow1251ToUtf8(fnmFile);
     } else {
-      fnmExpanded = _fnmApplicationPath+fnmFile;
+      fnmExpanded = _fnmApplicationPath + convertWindow1251ToUtf8(fnmFile);
     }
 
     if (IsFileReadable_internal(fnmExpanded)) {
@@ -1499,7 +1506,7 @@
 
   // try in the app's base dir
   if (fil_bPreferZips) {
-    fnmExpanded = _fnmApplicationPath+fnmFile;
+    fnmExpanded = _fnmApplicationPath + convertWindow1251ToUtf8(fnmFile);
     if (IsFileReadable_internal(fnmExpanded)) {
       return EFP_FILE;
     }
@@ -1511,13 +1518,13 @@
     // if a mod is active
     if (_fnmMod!="") {
       // first try in the mod's dir
-      fnmExpanded = _fnmCDPath+_fnmMod+fnmFile;
+      fnmExpanded = _fnmCDPath + _fnmMod + convertWindow1251ToUtf8(fnmFile);
       if (IsFileReadable_internal(fnmExpanded)) {
         return EFP_FILE;
       }
     }
 
-    fnmExpanded = _fnmCDPath+fnmFile;
+    fnmExpanded = _fnmCDPath + convertWindow1251ToUtf8(fnmFile);
     if (IsFileReadable_internal(fnmExpanded)) {
       return EFP_FILE;
     }
@@ -1574,14 +1581,14 @@
     // if should write to mod dir
     if (_fnmMod!="" && (!FileMatchesList(_afnmBaseWriteInc, fnmFileAbsolute) || FileMatchesList(_afnmBaseWriteExc, fnmFileAbsolute))) {
       // do that
-      fnmExpanded = _fnmApplicationPath+_fnmMod+fnmFileAbsolute;
+      fnmExpanded = _fnmApplicationPath + _fnmMod + convertWindow1251ToUtf8(fnmFileAbsolute);
       fnmExpanded.SetAbsolutePath();
       VerifyDirsExist(fnmExpanded.FileDir());
       return EFP_FILE;
     // if should not write to mod dir
     } else {
       // write to base dir
-      fnmExpanded = _fnmApplicationPath+fnmFileAbsolute;
+      fnmExpanded = _fnmApplicationPath + convertWindow1251ToUtf8(fnmFileAbsolute);
       fnmExpanded.SetAbsolutePath();
       VerifyDirsExist(fnmExpanded.FileDir());
       return EFP_FILE;
@@ -1610,12 +1617,12 @@
   // in other cases
   } else  {
     ASSERT(FALSE);
-    fnmExpanded = _fnmApplicationPath+fnmFileAbsolute;
+    fnmExpanded = _fnmApplicationPath + convertWindow1251ToUtf8(fnmFileAbsolute);
     fnmExpanded.SetAbsolutePath();
     return EFP_FILE;
   }
 
-  fnmExpanded = _fnmApplicationPath+fnmFileAbsolute;
+  fnmExpanded = _fnmApplicationPath + convertWindow1251ToUtf8(fnmFileAbsolute);
   fnmExpanded.SetAbsolutePath();
   return EFP_NONE;
 }
diff -aurN a/Engine/StdH.h b/Engine/StdH.h
--- a/Engine/StdH.h	2022-08-02 15:49:15.074780451 +0300
+++ b/Engine/StdH.h	2022-08-02 16:17:20.158156472 +0300
@@ -50,3 +50,4 @@
 
 #include <Engine/Base/Types.h>
 #include <Engine/Base/Assert.h>
+#include <Engine/Base/iconvlite.h>
diff -aurN a/SeriousSam/MainWindow.cpp b/SeriousSam/MainWindow.cpp
--- a/SeriousSam/MainWindow.cpp	2022-08-02 15:49:15.078113781 +0300
+++ b/SeriousSam/MainWindow.cpp	2022-08-02 15:47:41.988063087 +0300
@@ -30,7 +30,6 @@
 // for window reposition function
 static PIX _pixLastSizeI, _pixLastSizeJ;
 
-
 #ifdef PLATFORM_WIN32
 static HBITMAP _hbmSplash = NULL;
 static BITMAP  _bmSplash;
@@ -244,9 +243,10 @@
   ResetMainWindowNormal();
 
 #else
-  SDL_snprintf( achWindowTitle, sizeof (achWindowTitle), TRANS("Serious Sam (Window %dx%d)"), pixSizeI, pixSizeJ);
-  _hwndMain = SDL_CreateWindow(achWindowTitle, SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, pixSizeI, pixSizeJ, SDL_WINDOW_OPENGL);
-  if( _hwndMain==NULL) FatalError(TRANS("Cannot open main window!"));
+  SDL_snprintf( achWindowTitle, sizeof (achWindowTitle), TRANSV("Serious Sam (Window %dx%d)"), pixSizeI, pixSizeJ);
+  //CPrintF((const char*)"--- %s ---\n",achWindowTitle);
+  _hwndMain = SDL_CreateWindow((const char*) strWindow1251ToUtf8(achWindowTitle), SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, pixSizeI, pixSizeJ, SDL_WINDOW_OPENGL);
+  if( _hwndMain==NULL) FatalError(TRANSV("Cannot open main window!"));
   SE_UpdateWindowHandle( _hwndMain);
   _pixLastSizeI = pixSizeI;
   _pixLastSizeJ = pixSizeJ;
@@ -281,9 +281,10 @@
   ShowWindow(    _hwndMain, SW_SHOWNORMAL);
 
 #else
-  SDL_snprintf( achWindowTitle, sizeof (achWindowTitle), TRANS("Serious Sam (FullScreen %dx%d)"), pixSizeI, pixSizeJ);
-  _hwndMain = SDL_CreateWindow(achWindowTitle, SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, pixSizeI, pixSizeJ, SDL_WINDOW_OPENGL | SDL_WINDOW_FULLSCREEN);
-  if( _hwndMain==NULL) FatalError(TRANS("Cannot open main window!"));
+  SDL_snprintf( achWindowTitle, sizeof (achWindowTitle), TRANSV("Serious Sam (FullScreen %dx%d)"), pixSizeI, pixSizeJ);
+  //CPrintF((const char*)"--- %s ---\n",achWindowTitle);
+  _hwndMain = SDL_CreateWindow((const char*)strWindow1251ToUtf8(achWindowTitle), SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, pixSizeI, pixSizeJ, SDL_WINDOW_OPENGL | SDL_WINDOW_FULLSCREEN);
+  if( _hwndMain==NULL) FatalError(TRANSV("Cannot open main window!"));
   SE_UpdateWindowHandle( _hwndMain);
   _pixLastSizeI = pixSizeI;
   _pixLastSizeJ = pixSizeJ;
diff -aurN a/SeriousSam/MainWindow.h b/SeriousSam/MainWindow.h
--- a/SeriousSam/MainWindow.h	2022-08-02 15:49:15.078113781 +0300
+++ b/SeriousSam/MainWindow.h	2022-08-02 15:47:41.988063087 +0300
@@ -16,6 +16,12 @@
 extern BOOL _bWindowChanging;    // ignores window messages while this is set
 extern HWND _hwndMain;
 
+#ifdef PLATFORM_UNIX
+extern __attribute__ ((visibility("default"))) CTString strWindow1251ToUtf8(CTString from);
+#else
+DECL_DLL extern CTString strWindow1251ToUtf8(CTString from);
+#endif
+
 // init/end main window management
 void MainWindow_Init(void);
 void MainWindow_End(void);
