--- a/CMakeLists.txt	2022-12-27 12:09:54.000000000 +0300
+++ b/CMakeLists.txt	2023-06-14 09:55:25.141780000 +0300
@@ -1,6 +1,10 @@
-cmake_minimum_required(VERSION 2.8.7)
+cmake_minimum_required(VERSION 2.8.12)
 project(SeriousEngine)
 
+# set minimal standart
+set(CMAKE_CXX_STANDARD 14)
+set(CMAKE_CXX_STANDARD_REQUIRED ON)
+
 # Set @rpath for Mac OS X shared library install names.
 #cmake_policy(SET CMP0042 NEW)
 
@@ -9,7 +13,6 @@
 option(USE_SYSTEM_ZLIB "Use systems zlib development files" On)
 option(USE_CCACHE "Set to ON to use ccache if present in the system" ${USE_CCACHE})
 
-
 # fallback for cmake versions without add_compile_options # RAKE! Borrowed from dhewm3 project
 if(NOT COMMAND add_compile_options)
 	function(add_compile_options)
@@ -67,10 +70,22 @@
                                                         # since one wasn't set during config
     set(LOCAL_INSTALL TRUE)
 endif()
+if(CMAKE_INSTALL_PREFIX STREQUAL "/usr" ) # Only works for linux since I don't know what default is for windows/macos/freebsd.
+    set(LOCAL_INSTALL FALSE)
+endif()
+
+# Set internal name for not local installation
+if(TFE)
+    set(INTERNAL_NAME "serioussam")
+else()
+    set(INTERNAL_NAME "serioussamse")
+endif()
 
 # Set up some sanity stuff...
 if(CMAKE_SYSTEM_NAME STREQUAL "Linux" OR CMAKE_SYSTEM_NAME MATCHES "GNU|kFreeBSD")
     SET(LINUX TRUE)
+	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS}  -Wno-reorder -Wno-unused-but-set-variable -Wno-maybe-uninitialized -Wno-class-memaccess -Wno-unused-function -Wno-format")
+	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}  -Wno-reorder -Wno-unused-but-set-variable -Wno-maybe-uninitialized -Wno-class-memaccess -Wno-unused-function -Wno-format")
 endif()
 if(CMAKE_SYSTEM_NAME STREQUAL "FreeBSD")
     SET(FREEBSD TRUE)
@@ -82,29 +97,136 @@
     SET(WINDOWS TRUE)
 endif()
 
+# remove clang spam.
+if(MACOSX OR FREEBSD)
+	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wno-nullability-completeness")
+	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-nullability-completeness")
+endif()
+
 if(NOT CMAKE_BUILD_TYPE)
-    set(CMAKE_BUILD_TYPE Debug CACHE STRING "None Debug Release RelWithDebInfo MinSizeRel" FORCE)
+    set(CMAKE_BUILD_TYPE Release CACHE STRING "None Debug Release RelWithDebInfo MinSizeRel" FORCE)
 endif()
 SET(DEBUG FALSE)
 if(CMAKE_BUILD_TYPE STREQUAL "Debug")
     SET(DEBUG TRUE)
 endif()
 
+if (LINUX)
+    set (CMAKE_OS_NAME "GNU/Linux" CACHE STRING "Operating system name" FORCE)
+    ## Check for Debian GNU/Linux
+    find_file (DEBIAN_FOUND debian_version debconf.conf
+      PATHS /etc
+      )
+    if (DEBIAN_FOUND)
+      set (CMAKE_OS_NAME "Debian" CACHE STRING "Operating system name" FORCE)
+    endif (DEBIAN_FOUND)
+    ##  Check for Fedora
+    find_file (FEDORA_FOUND fedora-release
+      PATHS /etc
+      )
+    if (FEDORA_FOUND)
+      set (CMAKE_OS_NAME "Fedora" CACHE STRING "Operating system name" FORCE)
+    endif (FEDORA_FOUND)
+    ##  Check for RedHat
+    find_file (REDHAT_FOUND redhat-release inittab.RH
+      PATHS /etc
+      )
+    if (REDHAT_FOUND)
+      set (CMAKE_OS_NAME "RedHat" CACHE STRING "Operating system name" FORCE)
+    endif (REDHAT_FOUND)   
+    ## Extra check for Ubuntu    
+    if (DEBIAN_FOUND)
+      ## At its core Ubuntu is a Debian system, with
+      ## a slightly altered configuration; hence from
+      ## a first superficial inspection a system will
+      ## be considered as Debian, which signifies an
+      ## extra check is required.
+      find_file (UBUNTU_EXTRA legal issue
+	PATHS /etc
+	)
+    if (UBUNTU_EXTRA)
+	## Scan contents of file
+	file (STRINGS ${UBUNTU_EXTRA} UBUNTU_FOUND
+	  REGEX Ubuntu
+	  )
+	## Check result of string search
+	if (UBUNTU_FOUND)
+	  set (CMAKE_OS_NAME "Ubuntu" CACHE STRING "Operating system name" FORCE)
+	  set (DEBIAN_FOUND FALSE)
+	endif (UBUNTU_FOUND)
+    endif (UBUNTU_EXTRA)      
+    endif (DEBIAN_FOUND)
+endif (LINUX)
+
+message(STATUS "Operating system name: ${CMAKE_OS_NAME}")
+
+set(CMAKE_ARCH_BITS 32)
+set(CMAKE_INSTALL_LIBDIR "/usr/lib")
+if(CMAKE_SIZEOF_VOID_P EQUAL 8)
+    set(CMAKE_ARCH_BITS 64)
+    set(CMAKE_INSTALL_LIBDIR "/usr/lib64")
+endif()
+
+message(STATUS "Arch bits: ${CMAKE_ARCH_BITS}")
+
+if(DEBIAN_FOUND OR UBUNTU_FOUND)
+    #set libdir for debian based OS
+    if(${CMAKE_SYSTEM_PROCESSOR} MATCHES "riscv64")
+        set(CMAKE_INSTALL_LIBDIR "/usr/lib/riscv64-linux-gnu")
+    elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "^(arm.*|ARM.*)")  # 32bit)
+        set(CMAKE_INSTALL_LIBDIR "/usr/lib/arm-linux-gnueabihf")
+    elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "^(aarch64.*|AARCH64.*)")
+        set(CMAKE_INSTALL_LIBDIR "/usr/lib/aarch64-linux-gnu")
+        if(NOT "${CMAKE_SIZEOF_VOID_P}" EQUAL "8")
+            message(FATAL_ERROR "invalid pointer size")
+        endif()
+    elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "^(powerpc|ppc)64")
+        set(CMAKE_INSTALL_LIBDIR "/usr/lib/powerpc64-linux-gnu")
+    elseif(CMAKE_SYSTEM_PROCESSOR STREQUAL s390x)
+        set(CMAKE_INSTALL_LIBDIR "/usr/lib/s390x-linux-gnu")
+    elseif((CMAKE_SYSTEM_PROCESSOR MATCHES "i386|i686|x86|AMD64") AND (CMAKE_SIZEOF_VOID_P EQUAL 4))
+        set(CMAKE_INSTALL_LIBDIR "/usr/lib/i386-linux-gnu")
+    elseif((CMAKE_SYSTEM_PROCESSOR MATCHES "x86_64|AMD64") AND (CMAKE_SIZEOF_VOID_P EQUAL 8))
+        set(CMAKE_INSTALL_LIBDIR "/usr/lib/x86_64-linux-gnu")
+    elseif((CMAKE_SYSTEM_PROCESSOR MATCHES "i386") AND (CMAKE_SIZEOF_VOID_P EQUAL 8) AND (APPLE))
+        set(CMAKE_INSTALL_LIBDIR "/usr/lib/i386-linux-gnu")
+    else()
+        message(FATAL_ERROR "Unknown architecture")
+    endif()
+endif()
+
+message(STATUS "Installed libraries dir: ${CMAKE_INSTALL_LIBDIR}")
+
 ## ** RAKE! start compiler specific flags section **
 ## ** RAKE! Borrowed from dhewm3 project, need to **
 ## ** RAKE! clean up for SeriousEngine use. Also  **
 ## ** RAKE! need to make this pandora safe.	  **
 # compiler specific flags
-if(CMAKE_COMPILER_IS_GNUCC OR CMAKE_C_COMPILER_ID STREQUAL "Clang")
+if(CMAKE_COMPILER_IS_GNUCC OR CMAKE_C_COMPILER_ID STREQUAL "Clang" OR CMAKE_CXX_COMPILER_ID MATCHES "AppleClang")
 	# This section and the like are for flags/defines that can be shared between 
 	# c and c++ compile options
 	add_compile_options(-Wall)
 	add_compile_options(-pipe)
 	add_compile_options(-fPIC)
-	if(NOT PANDORA AND NOT PYRA AND NOT (MACOSX AND CMAKE_SYSTEM_PROCESSOR STREQUAL "arm64"))
-		add_compile_options(-march=native)
+	add_compile_options(-fms-extensions)
+	if(NOT PANDORA AND NOT PYRA AND NOT RPI4 AND NOT (MACOSX AND CMAKE_SYSTEM_PROCESSOR STREQUAL "arm64"))
+		if(${CMAKE_SYSTEM_PROCESSOR} MATCHES "riscv64")
+			add_compile_options(-march=rv64gc)
+		    add_compile_options(-ftree-vectorize)
+		    add_compile_options(-fomit-frame-pointer)
+			message(STATUS "Architecture RISCV64, -march=rv64gc")
+        elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "^(powerpc|ppc)64")
+			add_compile_options(-mpowerpc64)
+			#add_compile_options(-m64)
+		else()
+            if(LOCAL_INSTALL)
+			    add_compile_options(-march=native)
+            elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "i386|i586|i686|x86|AMD64|x86_64")
+			    add_compile_options(-march=native) # set mtune=generic if nedded
+		    endif()
+		endif()
 	endif()
-	if(CMAKE_SYSTEM_PROCESSOR MATCHES "^arm.*")
+	if((PYRA OR PANDORA)  AND (CMAKE_SYSTEM_PROCESSOR MATCHES "^arm.*"))
 		if(PYRA)
 		add_compile_options(-mfpu=neon-vfpv4)
 		add_compile_options(-mcpu=cortex-a15)
@@ -112,12 +234,38 @@
 		add_compile_options(-marm)
                 elseif(NOT (MACOSX AND CMAKE_SYSTEM_PROCESSOR STREQUAL "arm64"))
                     add_compile_options(-mfpu=neon)
-		else()
+		elseif(PANDORA)
 		add_compile_options(-mfpu=neon)
 		endif()
 		add_compile_options(-fsigned-char)
 	endif()
-        add_compile_options(-fno-strict-aliasing)
+    if(NOT PYRA AND NOT PANDORA AND ${CMAKE_HOST_SYSTEM_PROCESSOR} MATCHES "arm*")
+        if(CMAKE_SYSTEM_PROCESSOR MATCHES "^(arm.*|ARM.*)")  # 32bit
+            add_compile_options(-march=armv8-a+crc)
+		    add_compile_options(-mfpu=neon-fp-armv8)
+            if(RPI4) 
+		        add_compile_options(-mcpu=cortex-a72)
+            endif()
+		    add_compile_options(-mfloat-abi=hard)
+		    add_compile_options(-ftree-vectorize)
+		    add_compile_options(-fomit-frame-pointer)
+            message(STATUS "ARM 32bit, -march=armv8-a+crc, adding -mfpu=neon-fp-armv8")
+        elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "^(aarch64.*|AARCH64.*)")  # NEON is implied on aarch64
+            if(NOT "${CMAKE_SIZEOF_VOID_P}" EQUAL "8")
+                message(FATAL_ERROR "invalid pointer size")
+            endif()
+            add_compile_options(-march=armv8-a+crc+fp+simd)
+            if(RPI4) 
+		        add_compile_options(-mcpu=cortex-a72)
+            endif()
+		    add_compile_options(-ftree-vectorize)
+		    add_compile_options(-fomit-frame-pointer)
+            message(STATUS "AARCH64, -march=armv8-a+crc+fp+simd")
+        else()
+            message(FATAL_ERROR "Unknown ARM processor '${CMAKE_SYSTEM_PROCESSOR}'")
+        endif()
+    endif()
+    add_compile_options(-fno-strict-aliasing)
 	add_definitions(-D_REENTRANT=1)
 	add_definitions(-D_MT=1)
 
@@ -164,6 +312,7 @@
         endif()
 
 	# TODO fix these warnings
+	add_compile_options(-Wno-format-security)
 	add_compile_options(-Wno-switch)
 	add_compile_options(-Wno-char-subscripts)
 	add_compile_options(-Wno-unknown-pragmas)
@@ -183,6 +332,8 @@
 		add_definitions(-DPLATFORM_UNIX=1)
     		add_definitions(-DPLATFORM_MACOSX=1)
     		add_definitions(-DPRAGMA_ONCE=1)
+    		include_directories("/usr/local/include")
+    		include_directories("/usr/X11/include/")
 	elseif(WINDOWS)
 		add_definitions(-DPLATFORM_WIN32=1)
     		add_definitions(-DPRAGMA_ONCE=1)
@@ -277,6 +428,11 @@
     add_definitions(-DPLATFORM_PYRA=1)
 endif()
 
+option(RPI4 "Raspberry PI 4" FALSE)
+if(RPI4)
+    add_definitions(-DPLATFORM_RPI4=1)
+endif()
+
 option(USE_TREMOR "Use Tremor instead of Vorbis" FALSE)
 if (USE_TREMOR)
     add_definitions(-DUSE_TREMOR=1)
@@ -290,9 +446,23 @@
  set(MP "MP")
 endif()
 
+option(XPLUS "Compile a XPLUS modification" FALSE)
+if(XPLUS)
+    execute_process (
+        COMMAND bash -c "cp -fr ${CMAKE_SOURCE_DIR}/Entities${MP}/PlayerWeaponsHD.es ${CMAKE_SOURCE_DIR}/Entities${MP}/PlayerWeapons.es;"
+        OUTPUT_VARIABLE outVar
+    )
+    message(STATUS "Compile a XPLUS modification")
+else()
+    execute_process (
+        COMMAND bash -c "cp -fr ${CMAKE_SOURCE_DIR}/Entities${MP}/PlayerWeapons_old.es ${CMAKE_SOURCE_DIR}/Entities${MP}/PlayerWeapons.es;"
+        OUTPUT_VARIABLE outVar
+    )
+    message(STATUS "Compile a standard game")
+endif()
 
 # !!! FIXME: I currently force this, but you shouldn't _have_ to.
-option(USE_SINGLE_THREAD "Use Single Threaded version" TRUE)
+option(USE_SINGLE_THREAD "Use Single Threaded version" FALSE)
 if(USE_SINGLE_THREAD)
  add_definitions(-DSINGLE_THREADED=1)
 endif()
@@ -779,26 +949,68 @@
         Engine/zlib/uncompr.c)
 endif()
 
-
 # RAKE! Install Section.
-if(DEBUG) # RAKE! Will this work with TFE?
-    install(TARGETS ${SHADERSLIB} ${GAMEMPLIB} ${ENTITIESMPLIB}
-            RUNTIME DESTINATION "${CMAKE_INSTALL_PREFIX}/Bin"
-            LIBRARY DESTINATION "${CMAKE_INSTALL_PREFIX}/Bin/Debug"
+if(LOCAL_INSTALL AND NOT XPLUS)
+    if(DEBUG) # RAKE! Will this work with TFE?
+        install(TARGETS ${GAMEMPLIB} ${ENTITIESMPLIB}
+            LIBRARY DESTINATION "${CMAKE_INSTALL_PREFIX}/Mods/PESE2/Debug/Bin"
             PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_WRITE GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
-else()
-    install(TARGETS ${SHADERSLIB} ${GAMEMPLIB} ${ENTITIESMPLIB}
-            RUNTIME DESTINATION "${CMAKE_INSTALL_PREFIX}/Bin"
-            LIBRARY DESTINATION "${CMAKE_INSTALL_PREFIX}/Bin"
+    else()
+        install(TARGETS ${GAMEMPLIB} ${ENTITIESMPLIB}
+            LIBRARY DESTINATION "${CMAKE_INSTALL_PREFIX}/Mods/PESE2/Bin"
+            PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_WRITE GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
+        install(FILES "${CMAKE_BINARY_DIR}/Debug/libGame.so" 
+            DESTINATION "${CMAKE_INSTALL_PREFIX}/Mods/PEFE2/Bin"
+            PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_WRITE GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
+        install(FILES "${CMAKE_BINARY_DIR}/Debug/libEntities.so" 
+            DESTINATION "${CMAKE_INSTALL_PREFIX}/Mods/PEFE2/Bin"
+            PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_WRITE GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
+    endif()
+elseif(LOCAL_INSTALL AND XPLUS)
+    if(DEBUG) # RAKE! Will this work with TFE?
+        install(TARGETS ${GAMEMPLIB} ${ENTITIESMPLIB}
+            RUNTIME DESTINATION "${CMAKE_INSTALL_PREFIX}/Mods/PESE2HD/Debug/Bin"
+            PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_WRITE GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
+    else()
+        install(TARGETS ${GAMEMPLIB} ${ENTITIESMPLIB}
+            LIBRARY DESTINATION "${CMAKE_INSTALL_PREFIX}/Mods/PESE2HD/Bin"
+            PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_WRITE GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
+        install(FILES "${CMAKE_BINARY_DIR}/Debug/libGame.so" 
+            DESTINATION "${CMAKE_INSTALL_PREFIX}/Mods/PEFE2HD/Bin"
+            PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_WRITE GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
+        install(FILES "${CMAKE_BINARY_DIR}/Debug/libEntities.so" 
+            DESTINATION "${CMAKE_INSTALL_PREFIX}/Mods/PEFE2HD/Bin"
+            PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_WRITE GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
+    endif()
+elseif(NOT LOCAL_INSTALL AND NOT XPLUS)
+    install(TARGETS ${GAMEMPLIB} ${ENTITIESMPLIB}
+            LIBRARY DESTINATION "${CMAKE_INSTALL_LIBDIR}/${INTERNAL_NAME}/Mods/PESE2"
+            PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_WRITE GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
+    install(FILES "${CMAKE_BINARY_DIR}/Debug/libGame.so" 
+            DESTINATION "${CMAKE_INSTALL_LIBDIR}/serioussam/Mods/PEFE2"
+            PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_WRITE GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
+    install(FILES "${CMAKE_BINARY_DIR}/Debug/libEntities.so" 
+            DESTINATION "${CMAKE_INSTALL_LIBDIR}/serioussam/Mods/PEFE2"
             PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_WRITE GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
-endif()
 
-# RAKE! If CMAKE_INSTALL_PREFIX was set during config then its not a local install
-# and SE1_10.gro needs to be installed to Games root dir.
-if(NOT LOCAL_INSTALL)
-    install(FILES ${CMAKE_SOURCE_DIR}/../SE1_10.gro
-            DESTINATION ${CMAKE_INSTALL_PREFIX}
+elseif(NOT LOCAL_INSTALL AND XPLUS)
+    install(TARGETS ${GAMEMPLIB} ${ENTITIESMPLIB}
+            LIBRARY DESTINATION "${CMAKE_INSTALL_LIBDIR}/${INTERNAL_NAME}/Mods/PESE2HD"
+            PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_WRITE GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
+    install(FILES "${CMAKE_BINARY_DIR}/Debug/libGame.so" 
+            DESTINATION "${CMAKE_INSTALL_LIBDIR}/serioussam/Mods/PEFE2HD"
+            PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_WRITE GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
+    install(FILES "${CMAKE_BINARY_DIR}/Debug/libEntities.so" 
+            DESTINATION "${CMAKE_INSTALL_LIBDIR}/serioussam/Mods/PEFE2HD"
             PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_WRITE GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
 endif()
 
+add_custom_command(
+  TARGET ${GAMEMPLIB} POST_BUILD
+  COMMAND cp -f "$<TARGET_FILE:${GAMEMPLIB}>" "${CMAKE_BINARY_DIR}/Debug/libGame.so"
+  VERBATIM)
+add_custom_command(
+  TARGET ${GAMEMPLIB} POST_BUILD
+  COMMAND cp -f "$<TARGET_FILE:${ENTITIESMPLIB}>" "${CMAKE_BINARY_DIR}/Debug/libEntities.so"
+  VERBATIM)
 # end of CMakeLists.txt ...
